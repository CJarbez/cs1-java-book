<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="section.arithmetic-expressions"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <info>
        <title>Expressions</title>
    </info>
    
    <para>
    A binary operator is something that operates over two expressions in Java, forming a larger, more complex, compound expression. For instance, + is a binary operator representing the addition operation. 5 is a numeric literal expression, and 5 + 5 is a more complex, compound expression using the addition operator. For example, 5 + 5 evaluates to the value 10. 
    </para>
    
    <para>
    There are several binary arithmetic operators which work over numeric expressions in Java. Each is described below:
    
    \begin{itemize}
    \item $+$ (the addition operator)
    \item $-$ (the subtraction operator)
    \item $*$ (the multiplication operator)
    \item $/$ (the division operator)
    \item $\%$ (the modulus operator)
    \end{itemize}
    
    Note that, when using the $/$ operator with integers, you get back the integer quotient (rather than a floating point value). Modulus gives you the reminder when performing integer division. 
    </para>
    
    <para>
        There is also a unary operator in Java. This is an operator that works over only one  operand (expression), as opposed to two. This is the negation operator, which, like subtraction, is represented with -. For instance, -5 is a compound expression that is the negation of 5. 
    </para>
    
    <para>
    Also similar to algebra, note that these operators follow the same order of precedence. That is, $2 * 3 + 1$ is equal to 7, not 8. You can also use parentheses to force a certain order of evaluation for your expressions, 
    just as you did in algebra. 
    </para>
    
    
</section>
