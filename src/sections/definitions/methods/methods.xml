<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="section.method-definitions"
    xmlns:xi="http://www.w3.org/2001/XInclude" >
    <info>
        <title>Method Definitions</title>
    </info>
    
    <para>In prior sections we used method calls to do some of the computing for us. For example, a call to the <varname>max</varname> method in the <varname>Math</varname> class was a simple way to achieve what would have otherwise required more detailed code. In this section you will learn how to define your own custom methods. 
    </para>
    
    <para>
        Method definitions are a bit more involved than our previous topics. Methods take data (arguments) as input (through <firstterm>parameters</firstterm>) and return data as output (called the <firstterm>return value</firstterm>). The data types for both a method's input and output must be specified (similar to how you could specify the data type when you create a variable, though in this case it's required). Below is a diagram of the syntax of a method definition.
    </para>
        <!-- TODO: add anatomy of a method definition diagram -->
        <para>
            A method definition consists of a header (or signature) defining the input and output data types, and a method body. Let's first take a look at the contents of the signature. First is a data type for the data returned by the method. For instance, the <varname>abs</varname> method in the <varname>Math</varname> class returns a double, so it's return type would be <type>double</type>. Next is the name of the method. 
        </para><para>
    So far, the definition looks a lot like a variable definition, but we're not quite finished. We also need to define parameters for the method. Parameters are variables that will hold the input values for the method (the input values are what we referred to as arguments in prior sections). Following the name of the method is a pair of parentheses with definitions of the parameters in between the parentheses. Each parameter definition consists of a data type followed by the name of the parameter (just like the variable definitions we saw previously but without the semicolon at the end). There may be zero or more parameter definitions, separated by commas. 
        </para><para>
    The method body consists of an open curly brace, 1 or more statements, and a closing curly brace. These statements can do anything you want with the restriction that your method must reach a special kind of statement called return statement when it is finished (with some exceptions -- but for now assume this is always true). The return statement must be the last statement executed in the method and it returns the value that a call to the method would evaluate to. 
    </para>
        
        <!-- TODO: put in a 'square' example -->
        <!-- TODO: put in a 'add' example -->
        <!-- TODO: put in a 'ultimateAnswer' example -->
    
</section>