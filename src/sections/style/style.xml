<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="section.style"
    xmlns:xi="http://www.w3.org/2001/XInclude" >
    <info>
        <title>Style</title>
    </info>
    
<para>Now that we're developing more complex code, it's important to take a step back and consider what aspects of the code are aesthetically pleasing. This is important for a very practical reason: it's hard to develop, edit, or correct code that is difficult to read. Thus there are common style conventions that should be followed while developing Java code. 
</para>
    <section>
        <title>Block Indentation</title>
        
        <para>You've now seen two examples of a <emphasis>block</emphasis> in Java. if statements and method definitions both involved curly braces being opened around a series of statements. Every time you open a new block (that is, you open a curly brace), you should indent all statements within that block. Typically only 2 spaces are used rather than a full tab, since that block may contain another <emphasis>nested</emphasis> block, and so on. Indenting helps you visually recognize what blocks each statement belong to. Thus, while reading a Java program, you can quickly skip over a block of code if, for instance, you're not interested in the if statement it belongs to. 
        </para>
        <para>
            It's a fairly standard rule that you have no more than one statement on a line and always use a full line for a closing curly brace of a block, but there is some debate over whether you should open a curly brace for a block on the same line as an if statement or a method header, or whether you should open it on its own line. For instance:
        </para>
        <programlisting>
int addStuff(int x, int y) {
return x + y;
}
</programlisting>
        
        <para>and also</para>
        
        <programlisting>
int addStuff(int x, int y) 
{
return x + y;
}
</programlisting>
        
        <para>are both considered ``good style'' by many. Mostly it's important that you're consistent with your choice on where to place the opening brace. In this book, we'll consistently use the style of the first example because that's the way the author was raised (and by extension, also now you).
        </para>
    </section>

    <section><title>Identifier Choice</title>
        <para>In week \#1 the rules for Java identifiers (the names of variables and methods) were discussed. If you deviate from those rules, you end up with an error (for example, you can't have a variable named 10x). However, by \textit{convention} we try to use variable names that are meaningful and help explain the purpose of a variable. For instance, if you want to average the values of three exam scores, you might call each of the variables holding the exam scores \textit{exam1}, \textit{exam2}, and \textit{exam3} instead of \textit{x}, \textit{y}, and \textit{z}, and you might call the variable holding the average \textit{averageExamScore} or perhaps simply \textit{average}.
        </para>
    </section>
    
<section>
    <title>For Loops</title>
    <para>When writing loops, three components are very commonly included: 
    </para>
    
    <itemizedlist>
        <listitem>
            <para>Some local variable is declared and initialized, for instance a varibale named \textit{counter} could be initialized to 1.</para>
        </listitem>
        <listitem>   <para>Some local variable is declared and initialized, for instance a varibale named \textit{counter} could be initialized to 1.</para>That variable is tested as part of the while condition, for instance looping while \textit{counter} is less than 10. 
        </listitem>
        <listitem>
            <para>Some local variable is declared and initialized, for instance a varibale named \textit{counter} could be initialized to 1. That variable is tested as part of the while condition, for instance looping while \textit{counter} is less than 10. 
                At the end of each iteration of the loop, the variable is altered in some way, for instance \textit{counter} could be incremented at the end of each iteration of the loop. </para>
          </listitem>
    </itemizedlist>
    
    <para>Since nearly every while loop that we write contains these three components, and also because they play an important role in determining how the loop executes, Java provides a special syntax called a \textbf{for loop} that simply re-organizes these components to all reside at the front of the loop. 
    </para>
    
    <para>\textbf{for} loops start with the \textit{for} keyword and a pair of parentheses, just like a while loop starts, but inside the parentheses is first an expression (ending in a semicolon) that is executed before the loop starts, secondly a boolean expression (the same as the looping condition for the while loop), also ending in a semicolon, and finally a statement that is executed at the end of each loop (typically incrementing a variable). The last statement doesn't have a semicolon following it, but all three should be within the parentheses. The rest is identical to a while loop. 
    </para>
    
    <example>
        <title>Counting with a For Loop</title>
        <para>Consider the following while loop which adds the numbers between 1 and 10:</para>
        
<programlisting>
        int total = 0;
        int count = 1;
        while(count <= 10) {
        total = total + count;
        count++;
        }
</programlisting>
        
        <para>Here is identical code written as a for loop:</para>
        
        
        <programlisting>
        
        int total = 0;
        for(int count = 1; count <= 10; count++) {
        
        total = total + count;
        }
        ></programlisting>
    </example>
    
    <para>Because code written with while loops and for loops perform the exact same task, we call for loops \textbf{syntactic sugar}, in that it is meant only to help with the look of your code, not the function of your code. Essentially, it is used to improve your coding \textit{style}.
    </para>
    
    <example>
        <title>Iterating Through a String with a For Loop</title>
        <para>The following code will print each character of the string \textit{message}, one character per line:</para>
        
        <programlisting>
        String message = "hello";
        for(int i=0; i < message.length(); i++) {
        System.out.println(message.charAt(i));
        }
        </programlisting>
        
    </example>
    
</section>
    <title>Block Comments and Javadoc Comments</title>
    
    <para>Some times a portion of your code requires a more significant explanation spanning multiple lines. Rather than beginning each of these lines with a double slash for an end-of-line comment, it is sometimes preferable to designate a larger portion of your code for comments.</para> 
    
    <section>
        <title>Block Comments</title>
    
    Block comments are often used for these larger, more descriptive comments. To begin a block comment, type /* and all of the code, including newlines, will be considered a comment up to the closing */.
    
    Another use of block comments is to temporarily \textit{comment out} a portion of your code if you don't want it to run while you test your code but you also don't want to permenantly delete it. This can be helpful when \textit{debugging} your more complicated programs. 
    </section>
    
    <section>
        <title>Javadoc Comments</title>
    <para>A special type of block comment is a \textbf{javadoc comment}. These comments come before each method definition and describe in detail what the method does, including the roles of its parameters and a description of the method's return value (if any). Javadoc comments begin with a /** instead of a /*
    </para>
        <para>
    Javadoc comments also have a special syntax for describing the parameters and return values. Within the Javadoc comment, a line beginning with \begin{verbatim}@return\end{verbatim} will describe the return value and a line beginning with \begin{verbatim}@param\end{verbatim} followed by the name of the parameter will describe one of the parameters. If you document your parameters in this way, you can also refer to your parameters in the rest of the comment with the following: \begin{verbatim}\{@code parameterName\}\end{verbatim} where \textit{parameterName} is the name of your parameter. 
        </para>
        <para>
    If you use the Javadoc comment format, HTML documentation for your code can be automatically generated. In fact, the API documentation pages we've used previously were all automatically generated from javadoc comments in the API source code!
        </para>
    
    <xi:include href="../../examples/javadoc-method-basic.xml" parse="application/xml"/>
    </section>
<section>
    
</section>


