<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="section.philosophy"
    xmlns:xi="http://www.w3.org/2001/XInclude" >
    <info>
        <title>Philosophy of this Book</title>
    </info>
    
    <section><title>Goals</title>
        <para>
            First and foremost, this book is intended to introduce students to programming and computer science. Beyond simply learning how to write programs in a particular programming language, this book is intended to assist in teaching students what programs are, what kind of problems can by solved by programs, how programs are used to solve problems, what the primary tools are for developing programs, and how students can progress in learning programming and computer science beyond the course in which they are using this book. For students who have had some experienceprogramming, perhaps in a self-taught environment, a course using this book should complement their experience by providing a solid background in programming fundamentals important to understanding more advanced concepts in computer science. To this end, this book doesn't avoid the technical terms and abstract concepts that a trade book may gloss over in an attempt to get students up and programming more quickly. 
        </para>
        <para>
            Secondly, this book is intended to introduce the Java programming language to someone new to programming. Prior programming experience is not assumed and the book is written for an audience that is programming for the first time. For this reason, this book is not intended to instill a mastery of Java and prioritizes instead the fundamental elements of programming that are applicable to students using any language, Java included, in the future. For students who want a more detailed explanation of a topic or wish to dive deeper in to the features of Java, references are made throughout the book to Oracle's official java language reference which is also freely available for use in a classroom setting: https://docs.oracle.com/javase/specs/jls/se10/html/index.html
        </para>
        <para>All that said, the material in this book could also be well suited to other purposes, such as a language-specific course on Java for students already past introductory computer science courses. In such cases, it is recommended that a customized version of the textbook be created (see the "Modular by Design" section below).</para>
    </section>
    
    <section><title>Why Java?</title>
        <para>Before heading any further, it's important to address a question you (the reader) have likely already answered, only because it bears some further consideration. The choice of language in CS1 is often not a choice for individual instructors. It might be dictated by department standards since future courses may use the same language. It might be partially dictated by the need for transfer students or students with AP credit to be able to move more quickly through a program. It might  even be partially dictated by the local industry that expect a certain set of proprietary skills in college graduates. Regardless of the reason you've chosen Java for your course, or in the case that you actually are currently openly considering adopting Java, I hope to convince you that it might be a better choice than you currently think, even if you already think it is a good one.</para>
        <para>Perhaps this section should be titled: "Why not Python?" Frankly, this is a good question. Before I get to Python, I should mention that my first programming language in academia was actually Scheme. Before I took H211 at Indiana University I had significant experience working with BASIC, C, and C++ -- none of which are languages I would ever teach to a beginner, in retrospect. I loved the way Scheme set all of the students on a level playing field, regardless of prior experience, but I loved even more how the simple syntax of Scheme allowed us to focus on fundamental programming concepts rather than the minutiae of a complex language like C++. Using the Scheme REPL also allowed me to learn quickly through ad-hoc experimentation in class. This took place in the 90's and it was still a more pedagogically effective approach for a CS1 course than anything I've seen since!</para>
        <para>Python has become a very popular CS1 language for many of the reasons Scheme remains the language of choice at IU. Python is also a natural scripting language, ships with a standard REPL, and through its syntax is more complex than Scheme, it's not as burdensome (some say "wordy") as Java has been known to be. It's also, like Scheme, a dynamically typed language. Not having to worry about assigning types to variables also makes it easier for programmers to get something up and running quickly in both Scheme and Python, which has obvious appeal to a CS1 instructor.</para>
        <para>Until recently, Java has had a very high barrier of entry for those developing simple programs. As a statically typed language, it was considered best suited to large, complex projects. Rather infamously, the most simple Java program you can write (hello world) is 5 lines long and contains enough programming concepts to span most of a CS1 course. Experimentation was difficult in Java because every change required recompilation, and a re-run through the program up until the point the change was made. </para>
        <para>Note that, in the previous paragraph, I was using past tense. Java SE 9 brought an official REPL to Java (jshell), which for me, changed everything. Other REPL's had been available before, none truly made Java a scripting language -- at best they were just a way to play with expressions. JShell is not only a robust REPL for experimenting with Java in a CS1 class, it's also a standard REPL, meaning that it can be taught in CS1 with the expectation that it will still be a useful proprietary skill for the students later in their career. Coupled with the increased use of type inference in Java SE 8 (lambdas) and Java SE 10 (local variables), Java is well suited to not only help students get their programs up and running quickly, but also benefit from static type checking, making it easier for them to both debug their programs and understand the importance of type systems in a modern programming language. </para>
    </section>
    
    <section><title>Experiential Learning</title>
        <para>As a colleague of mine likes to say, "Programming is not a spectator sport." As important as it is for a student to understand the difference between a conditional expression and a conditional statement, a student must also be able to understand programming in a more innate way and develop the faculties to solve programming problems involving all of these abstract concepts. Since this book assumes no prior experience programming, it is intended to be used in a highly active learning environment that involves programming experiences. For this reason, instructional sections are intentionally succinct and rely more on examples to help students understand the concepts being taught. It is also expected that instructors will take advantage of most or all exercises available through this book in a course utilizing it. This book is not intended to teach these concepts independent of a hands-on environment for instruction.</para>
        
        <para>The advent of JShell makes it much easier to employ a more experiential approach to teaching programming, but textbooks need to adapt. For many, the main concern is when to introduce object oriented concepts when teaching Java. Because of JShell, it is now possible to write Java programs without having to write a class definition, which allows us to focus immediately on more fundamental imperative programming concepts first such as expressions and statements. This book does not avoid the topic of objects as a data type entirely, but does delay teaching the <emphasis>definition</emphasis> of new object types to focus on the core concepts of algorithms and imperative programming.</para>
    
    </section>
    
    <section><title>Modular by Design</title>
        <para>This book is truly a free and open-source textbook in the sense that, not only is it free to use (according to the creative commons license available at the end of the book), but also instructors are free to download and modify the XML documents it was developed from (again, subject to the constraints of the creative commons license). Every institution has different needs and instructors may have a different perspective on a topic or example that they would like to inject. This is encouraged. This textbook can be entirely customized to an individual course all they way to the level of the exercises, which can be interspersed in-line throughout the custom textbook. </para>
        <para>Sections of this book are intentionally cohesive and minimally coupled (to borrow some programming terminology). Of course, some sections will depend on other sections (class definitions don't make much sense unless you've already seen method definitions), but these dependencies are listed in a remark in the source XML for each section. As long as a dependent section isn't listed before the section it depends on, there shouldn't be a problem for students using a modified version of this book. Examples also carry prerequisites that may extend beyond a chapter's prerequisites. Depending on the order the instructor uses, you may need to update or replace the examples used in some of the sections. </para>
        <para>Not all sections carry the same amount of content, and some instructors may wish to spend more or less time with some sections. Between 1-3 sections can be covered in a 50-minute class period. When ordering a custom version of this book, it's recommended that you not include every section on, for instance, expressions, all in a row, but rather spread them out and cover them when they are most relevant to other material or projects you're using in the course. The standard version of the book does not group all related concepts in to single chapters for this purpose. Instead, each chapter is intended to cover approximately a weeks' worth of material in the order it is expected to be presented in class. </para>
    </section>
</section>
