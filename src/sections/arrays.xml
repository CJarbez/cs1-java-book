<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="section.algorithms"
    xmlns:xi="http://www.w3.org/2001/XInclude" >
    <info>
        <title>Arrays</title>
    </info>
    
    <para>

Strings are a collection of characters, but we haven't yet seen a way to handle a collection of other types of values. Arrays allow Java programmers to create collections of values of an arbitrary type. 
    </para>
    <section>
        <title>The Array Type</title>
        <para>
            
            Values in an array can have any type, but they must all have the \textit{same} type. Arrays themselves are a type of data, but are \textit{parameterized} by the type of data they hold. Thus an array type has two parts: the type of data held by the array, and a pair of square brackets indicating an array type. For example, they type ``array of integers'' would be written:
            \begin{code}
            int[] 
            \end{code}
            
            A variable named \textit{arr} that could hold an array of integers is defined as follows:
            
            \begin{code}
            int[] arr;
            \end{code}</para>
    </section>
    <section>
        <title>Creating Array Values</title>
        <para>Like strings, arrays are object types. Thus, variables with array types can be null:
            
            \begin{code}
            int[] arr = null;
            \end{code}
            
            We also create array objects with the \textbf{new} keyword, although the syntax is a little different than for other constructor calls. Square brackets are used instead of parentheses and the size of the array is provided within the square brackets. The size is constant and cannot be changed over the lifetime of the array object you create. For example, the following code initializes \textit{arr} to contain an array of 5 integers:
            
            \begin{code}
            int[] arr = new int[5];
            \end{code}
            
            Each of the integers in the array \textit{arr} are initialized to zero in the previous example. However, we can initialize them to hold arbitrary values by enumerating those values within curly braces instead of providing the length of the array. For example, the following code initializes \textit{arr} to hold the values 1 through 10:
            
            
            \begin{code}
            int[] arr = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
            \end{code}
        </para>
    </section>
    <section>
        <title>Operations on Arrays</title>
        <section>
            <title>Length of an Array</title>
            <para>
                The first operation to consider on arrays is how to determine the length of an array. This is similar to determining the length of a string, but instead of calling a method, the \textbf{length} \textit{field} is accessed instead. For example, assuming the most recent defitinition of \textit{arr}, the following expression will evaluate to $10$:
                
                \begin{code}
                arr.length
                \end{code}
                
                It is a very common mistake to include parentheses at the end of \textit{length} for an array or to leave off parentheses at the end of \textit{length} for a string because of this unfortunate inconsistency. 
            </para>
        </section>
        <section>
            <title>Accessing an Array</title>
            <para>
                
                The most important operation on arrays is retrieving a value from an array. This is very similar to the \textbf{charAt} instance method we used with strings, but instead of calling a method, square brackets following an array value indicate the index of the value to be retrieved. For example, assuming the most recent defitinition of \textit{arr}, the following expression will evaluate to $1$:
                
                \begin{code}
                arr[0]
                \end{code}
                
                Note that the first index of an array is 0, just as with strings.</para>
        </section>
        <section>
            <title>Modifying an Array</title>
            <para>
                
                Though the size of an array can't change, the values it contains can. Think of an indexed array (an array value with an index following it in square brackets) as any other variable. In addition to evaluating it like a variable expression (above), we can also use it in an assignment statement. For example, the following statement will assign the value $100$ to the first position in the array \textit{arr}:
                
                \begin{code}
                arr[0] = 100;
                \end{code}
                
                Following this assignment statement, the following expression will evaluate to $100$:
                
                \begin{code}
                arr[0]
                \end{code}
            </para>
        </section>
        <section>
            <title>Iterating through an Array</title>
            <para>
                For loops are a very convient way to process each element of an array. For example, the following code initializes arr to the values 1 through 10, but can be easily modified to have any upper limit:
                
                \begin{code}
                int size = 10;
                int[] arr = new int[size];
                for(int i=0; i<arr.length; i++) {
                    arr[i] = (i + 1);
                    }
                    \end{code}
            </para>
        </section>
    </section>
    <section>
        <title>Object References</title>
        <para>
            An important and subtle distinction in dealing with object type variables is that the values they hold are not the objects themselves, but rather \textbf{references} to the objects. In this sense, the \textbf{null} value indicates that a variable is not referencing any value. 
            
            This doesn't have particularly important implications when dealing with \textbf{immutable} objects like strings (immutable meaning that the values within the object cannot be changed). However, when we use a \textbf{mutable} object like an array, we need to be careful. 
        </para>
        <section>
            <title>Copying Object References</title>
            <para>
                If you have a variable of type \textit{int} and copy its value to another variable, you can expect that the value is truly copied. For example:
                
                \begin{code}
                int x = 5;
                int y = x;
                x = 10;
                \end{code}
                
                Tracing through this example, the value 5 was first assigned to x, then copied from x to y. Thus, when the value 10 is assigned to x on the last line, the copy of the value 5 held by y remains intact. Evaluating y would still yield the value 5. 
                
                However, consider the following code:
                
                \begin{code}
                int[] x = new int[] {5};
                int[] y = x;
                x[0] = 10;
                \end{code}
                
                What would y[0] be? In this case, it would also be 10. Tracing through this example, in the first line, an array is created holding just one value, 5, and a reference to this array object is stored in the variable x. Next, the reference to this object is copied from x and stored in y. That is, both x and y are holding references to the same object! The third line changes the value inside of this array, meaning that both x and y are now referencing an array that contains the value 10! 
                
            </para>
        </section>
        <section>
            <title>Methods with Side Effects</title>
            <para>
                In prior sections we've developed methods that take some kind of input, perform some calculations on the input, and produce an output without affecting the values that were passed in. Consider the following code:
                
                \begin{code}
                int x = 5;
                int y = 10;
                System.out.println(Math.max(x, y));
                System.out.println(x);
                System.out.println(y);
                \end{code}
                
                This code will print the values 10, 5, and 10 on three separate lines. In particular, we can rest assured that Math.max has no impact on the values that x and y hold. This is because Math.max has no \textbf{side effects}; that is, it does not have any impact on any part of a program calling it (other than its own local variables). 
                
                This is not true of every method. For example, calling System.out.println() modifies the global state of the program, since it writes to standard output. 
                
                Consider the following method:
                
                \begin{code}
                void clearArray(int[] arr) {
                for(int i=0; i<arr.length; i++) {
                    arr[i] = 0;
                    }
                    }
                    \end{code}
                    
                    Note that the method above has no return value. It modifies the state of an array value that is passed in. This is anotehr example of a potentially useful side effect. Clearly not all side effects are bad, but inadvertent or unexpected side effects are the source of many confusing and troublesome bugs in more complex programs. 
            </para>
        </section>
    </section>
</section>