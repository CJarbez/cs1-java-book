<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="section.algorithms"
    xmlns:xi="http://www.w3.org/2001/XInclude" >
    <info>
        <title>Java Applications</title>
    </info>
    
    <para>
        The last section explained how Java classes can be used to hold collections of static methods. They are also used as the entry points in to stand-alone Java applications. 
    </para>
    <section>
        <title>Main Methods</title>
        <para>
        To run a java application, you must provide the Java runtime environment (JRE) with the name of a class representing a Java application. The JRE will then search for one particular static method called \textbf{main} and execute it. This is called the \textbf{entry point} to the application. 
        
        The JRE is very picky about how main should be defined. Firstly, the name must be exact -- \textit{main} must not be capitalized or otherwise misspelled. Next, the method (like the class definition) must be declared to be public. It also must be a static method, so both of these keywords need to preceed the rest of the method definition (typically public comes first, but the order is more of a style issue). Next, the return type of the method must be void. Finally, the method must have one parameter. The parameter can be named anything you want, though by convention it is given the name \textit{args}. What is important is that the type of this parameter is an array of strings:  String[].  
        
        Putting this all together, the following serves as an example of a complete Java application:
        </para>
        <programlisting>
<xi:include href="hello.java" parse="text/plain"/>
            </programlisting>
        <para>
        This is the classic ``hello world'' program that is often given on the first day of a programming class. In many languages, ``Hello World'' is simply a one-line program, making this a convienent place to start in an introductory programming class. However, Java was designed with more complex software development in mind, and a more complex ``Hello World'' example is one of the unintended side effects of that choice (pun intended). By starting with tools like jshell and codingbat, you were able to learn each of the concepts present in this code before using them in an application (with the exception of the \textit{public} keyword, to some extent). 
        
        Note that this program would have to be defined in a file called \textbf{Hello.java}. 
        </para>
    </section>
    <section>
        <title>Compiling and Running Java Programs</title>
        
        <para>
            If you develop a java file such as \textbf{Hello.java}, you must first compile it before you run it. Recall that typing \textit{jshell} at the command prompt started up the jshell REPL. Similarly, you can compile this Java program at the command prompt by typing ``javac Hello.java''. If the command was successful, you should see a file in your directory called ``Hello.class''. If it was unsuccessful, you will recieve an error message. Generally, you can compile any other Java file by including its file name in the place of ``Hello.java''. 
        
        Once your program is compiled successfully, you can run it by typing the command ``Java Hello''. This starts up the JRE and tells it to look for a main method in the class \textbf{Hello}. If you did not properly define your main method, you may receive an error message at this point. Otherwise, you will see the welcome message printed in the console.   
        </para>
        
    </section>
</section>



