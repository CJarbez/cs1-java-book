<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="section.booleans"
    xmlns:xi="http://www.w3.org/2001/XInclude" >
    <info>
        <title>Booleans</title>
    </info>
    
    <para>   
        This section will introduce a significant new primitive type: \begin{textbf}booleans\end{textbf}.
        The boolean type is actually the most simple type because they have only two possible values: 
        \begin{textit}true\end{textit} and \begin{textit}false\end{textit}. Both \begin{textit}true\end{textit} 
        and \begin{textit}false\end{textit} are also literal boolean values, and \begin{textit}boolean\end{textit} 
        is the name of the type. For instance, you can declare and initialize a boolean variable as follows:
    </para>
<programlisting>
boolean mybool = true;
</programlisting>


    <section>
        <info>
            <title>Comparison Operators</title>
        </info>
        
        <para>   
            The boolean type is useful for answering ``yes'' or ``no'' 
            quesions, such as ``is 2 equal to 1 + 1?''. We can ask these 
            types of questions with comparison operators. 
            
            The comparison operators are binary operators, just like the 
            arithmetic operators you learned last week. However, they operate 
            over values of any type, and the evaluate to a boolean value. For 
            instance, == is the comparison operator. It determines whether two 
            values are the same or not. So, to answer the question we posed in 
            the last paragraph, we could use an expression like this:
            
            <programlisting>
(1 + 1) == 2
</programlisting>
            
            If you type this in to the REPL, it will evaluate to true. 
            Note that the parentheses are not necessary, either. + will be evaluated before 
            any comparison operators will be.
            There are several other comparison operators that will be useful to us, summarized below:
            
            <itemizedlist>
                <listitem>
                    <para>!=  Not equal to</para>
                </listitem>
                <listitem>
                    <para>&gt; greater than</para>
                </listitem>
                <listitem>
                    <para>&lt; less than</para>
                </listitem>
                <listitem>
                    <para>&gt;= greater than or equal to</para>
                </listitem>
                <listitem>
                    <para>&lt;= less than or equal to</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            For example, the expression 
            4 &lt; 3 + 3 would evalute to <literal>true</literal>. 
        </para>
    </section>
    
    
    <section>
        <info>
            <title>Boolean Operators</title>
        </info>
        <para>
            
            There are also operators that work strictly over boolean values, just as the arithmetic 
            operators we used last week worked strictly over numeric values. These are called 
            <firstterm>boolean operators</firstterm>. They operate over one or 
            two boolean values and evaluate to another boolean value.  These operations are 
            quite simple, but form the basis for what is known as <firstterm>boolean algebra</firstterm>. 
            
            The first operator we'll consider is the and operator: &amp;&amp;. This is a boolean operator 
            that evaluates to true only when both the left and right operands also evaluate to true. For instance:
            
            <programlisting>
true &amp;&amp; false
</programlisting>    
            
            ...evaluates to false, since the right-hand operand is false. However:
            
            <programlisting>
true &amp;&amp; true
</programlisting>
            
            ...evalutes to true, since both operands are true.
            
            The next operator we'll consider is the or operator: || It is similar to the 
            and operator, but it evaluates to true when either of the operands are true. 
            Put another way, this operator will only evaluate to false when both of its 
            operands evaluate to false. For example, if you replaced &amp;&amp; with || 
            in both of the last two expressions, they would both evaluate to true.
            
            The last boolean operator we'll consider is unique in that it's a unary 
            operator. Recall that this means it has only one operand. It is called the 
            not operator: !   This operator simply reverses the boolean value of its 
            operand. For example:
            
            <programlisting>
!false
</programlisting>
            
            ...evaluates to true. Note that all of these operators can be combined and nested in subexpressions. For instance, the following expression evaluates to true:
            
            
            <programlisting>
!((false &amp;&amp; false) || false)
</programlisting>
            
            These operators also have an oerder of precedence: !, ||, &amp;&amp;
        </para>
    </section>
    
    
</section>
