<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="section.while-loops"
    xmlns:xi="http://www.w3.org/2001/XInclude" >
    <info>
        <title>While Loops</title>
    </info>

  <para>
While loops are a lot like if statements. In fact, they have a nearly identical syntax. </para>

    <figure xml:id="fig.while-loop">
        <title>Anatomy of a While Loop</title>
        <mediaobject>
            <imageobject condition="print">
                <imagedata fileref="../../../tmp/while-loop.png"/>
            </imageobject>
            <imageobject condition="web">
                <imagedata fileref="../../../tmp/while-loop.png"/>
            </imageobject>
            <textobject><phrase>Anatomy of a While Loop</phrase></textobject>
        </mediaobject>
    </figure>
    
    
    <para>While loops start with the <code>while</code> keyword, and then a boolean expression in parentheses, and then a block of code (a series of statements surrounded by curly braces) or a single statement. The only difference is that when this block of code or single statement completes, program control returns to the beginning of the while loop. Think of it as an if statement that repeats itself indefinitely.
</para><para>
    Now you may be concerned by the word <emphasis>indefinitely</emphasis>, and you should be -- it's a distinct possibility that a while loop can run <emphasis>forever</emphasis>. However, after each <firstterm>iteration</firstterm> of the loop (an iteration is complete after execution reaches the end of the code block), the boolean expression at the front of the while loop is evaluated again. If you wrote the loop correctly, that boolean expression should evaluate to <literal>false</literal> when you don't want the loop executing anymore. 
</para>
    
    <example><title>Counting with a While Loop</title>
    <para>
The following code will add up the numbers 1 through 10:
</para>
<programlisting>
<xi:include href="../../../examples/code/count-to-ten.jsh" parse="text"/>
</programlisting>
<para>
After the first iteration of the loop, count will increase by 1 and total will increase by 1. Thus, when the boolean expression is evaluated the second time, count will be 1 (and not 0). However, 1 is still less than 10, so the loop will run a second time. After the second iteration, count will increase to 2 and total will increase to 3. Now you might see where this is going. The loop will run 8 more times until count is equal to 11. At that point, count will be greater than 10, so the boolean expression will be false, and the statements inside the block will be skipped. 
</para>    
    </example>
    
</section>
