<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="section.for-each"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <info>
        <title>For-Each Loops</title>
    </info>

<para>While loops used to iterate over an array often looked very similar, so for loops were introduced as a more concise way to handle the task. <firstterm>For-Each Loops</firstterm> were introduced in Java 5 as an even more concise way to deal with these tasks, and are preferred whenever the programmer intends to iterate over each element of an array <emphasis>sequentially</emphasis> (that is, starting with the first, then the second, and so on until the last element).
</para>

    <para>
A for-each loop eliminates the index variable <varname>i</varname> entirely. Instead, the programmer must define a new variable that will hold a single element of the array through each iteration of the loop. The same keyword <code>for</code> is used. Following the definition of this new variable, the programmer must include a colon (<code>:</code>) and then an expression yielding the array to be iterated over (usually just a variable reference).
    </para>


<example>
    <para>Consider the following array of Strings:</para>

<programlisting>
String[] names = new String[] { "Jane", "Billy", "Susie" };
</programlisting>

<para>A for loop could be used to print each name out:</para>

<programlisting>
for(int i=0; i &lt; names.length; i++) {
    System.out.println(names[i]);
}
</programlisting>

<para>The following for-each loop will perform the exact same task with a little less code, and is a little easier to read and understand:
</para>

<programlisting>
for(String name : names) {
    System.out.println(name);
}
</programlisting>
</example>
</section>
