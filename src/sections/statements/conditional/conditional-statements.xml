<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="section.conditional-statements"
    xmlns:xi="http://www.w3.org/2001/XInclude" >
    <info>
        <title>Conditional Statements</title>
    </info>
    <para>
    Booleans are important because you can use them to make decisions in your programs. Note that several of the algorithms we've worked with asked us to do one of two things depending on some condition. Boolean expressions allow us to specify the condition, and conditional expressions allow us to make conditional actions. 
    </para>

<section>
    <info><title>If Statements</title></info>
    
    
    <para>
    An if statement is a new kind of statement that will only execute when a certain boolean expression evaluates to true.
    </para>
    
    
    <figure xml:id="fig.simple-if-statement">
        <title>Anatomy of a Simple if Statement</title>
        <mediaobject>
            <imageobject condition="print">
                <imagedata fileref="../../../fig/simple-if-statement.png"/>
            </imageobject>
            <imageobject condition="web">
                <imagedata fileref="../../../fig/simple-if-statement.png"/>
            </imageobject>
            <textobject><phrase>Anatomy of a Simple if Statement</phrase></textobject>
        </mediaobject>
    </figure>
    
    
    <para> If statements start with the keyword <code>if</code>, then a boolean expression (surrounded in parentheses -- the parentheses are necessary), then the statement we want to conditionally execute. For instance, consider the following statements:
    </para>
    
<programlisting>
    int x = 10;
    int y = 0;
    
    if (y > x) x = 30;
    
    if (x > y) y = 20;
</programlisting>
    
    <para>
        The first if statement does nothing. y is not greater than x at this point, so the assignment statement that follows it (<code>x = 30;</code>) does not execute. The second if statement will set the variable <varname>y</varname> to the value 20. Since <varname>x</varname> is greater than <varname>y</varname>, the statement (<code>y = 20;</code>) will be executed. 
    </para><para>
        More than one statement can be conditionally executed in an if statement. In fact, you can include as many as you like by opening up a <firstterm>block</firstterm> of code using curly braces surrounding each of the conditionally executed statements.
    </para>
    
    
    
    <figure xml:id="fig.if-statement">
        <title>Anatomy of an if Statement with a Block Body</title>
        <mediaobject>
            <imageobject condition="print">
                <imagedata fileref="../../../fig/if-statement.png"/>
            </imageobject>
            <imageobject condition="web">
                <imagedata fileref="../../../fig/if-statement.png"/>
            </imageobject>
            <textobject><phrase>Anatomy of an if Statement with a Block Body</phrase></textobject>
        </mediaobject>
    </figure>
    
    
    
<programlisting>    
if (x > y) {
    x = 30;
    y = 40;
    z = 50;
}
</programlisting>  
    <para>
        There are a couple important points to keep in mind about code blocks. First, notice that there is no semicolon at the end of the block of code following the closing curly brace. Even though we say there is an if <emphasis>statement</emphasis> here, the if portion doesn't actually have a semicolon on the end. Including a semicolon folloing the if portion of this code snippet is actually a common error that can be difficult to debug (the body of the if would always execute in this case and no error message would be given). 
    </para>
    <para>
        Another important consideration is style. Note that all of the statements inside of the block are indented. This is an important convention in Java that makes the code much easier to read. Soon you will be including blocks of code inside of blocks of code, and each should be further indented, helping the programmer to see how deeply <firstterm>nested</firstterm> the blocks of code are. Typically each nested statement is indented two spaces. Sometimes a tab or four spaces is used instead, but this can become a problem with larger programs. Whatever choice you make, the most important consideration is that you use consistent indentation throughout your program. 
    </para>
</section>


    <section>
        <info>
            <title>Else Statements</title>
        </info>
        <para>Conditional expressions provided a value whether our boolean expression evaluated to <literal>true</literal> <emphasis>or</emphasis> <literal>false</literal>. We can similarly provide an alternative block of statements we want executed if the boolean expression used in our if statement evaluates to false by using an <code>else</code> statement. 
        </para>
        
        
        <figure xml:id="fig.if-else-statement">
            <title>Anatomy of an if / else Statement</title>
            <mediaobject>
                <imageobject condition="print">
                    <imagedata fileref="../../../fig/if-else-statement.png"/>
                </imageobject>
                <imageobject condition="web">
                    <imagedata fileref="../../../fig/if-else-statement.png"/>
                </imageobject>
                <textobject><phrase>Anatomy of an if / else Statement</phrase></textobject>
            </mediaobject>
        </figure>
        
        <para>
            Else statements look exactly like if statements but must immediately follow the end of the if statement. 
        </para>  
       
        
        <example>  
            <title>Implementing Absolute Value with if/else</title>
            <para>Recall the <varname>abs</varname> method from the <varname>Math</varname> class that determined the absolute value of a number. In this example, we'll write our own absolute valued method that does the exact same thing using an <code>if</code> and an <code>else</code> statement. We'll name this method <varname>myAbs</varname> to make it distinct:
            </para>
            <programlisting>
<xi:include href="../../../examples/code/myAbs.jsh" parse="text/plain"/>
        </programlisting>
            <para>If <varname>x</varname> is greater than <literal>0</literal>, the first if statement will execute, meaning that the value stored in <varname>x</varname> will be returned. If <varname>x</varname> is not greater than zero, the return statement inside the <code>else</code> block will execute instead, meaning that the negation of the value stored in <varname>x</varname> will be returned. Note that <literal>-0</literal> is returned when <varname>x</varname> is stores the value <literal>0</literal>, but since these two values are equivalent, it doesn't make a difference. Also note that the return statement is still always the last statement executed, no matter what the value of <varname>x</varname> is. </para>
        </example>
    </section>
    

    <section>
        <info>
            <title>Nested If Statements</title>
        </info>
        
        <para>Any statement can be included in the body of an if statement, which means you can include an if statement inside an if statement! This is called a nested if statement. 
        </para>
        <example>
            <title>Nested if Statements to Determine Best Temperature</title>
            <para>
                The following method will return <literal>true</literal> <emphasis>if</emphasis> the <varname>tempaerature</varname> (an integer type variable) is between <literal>68</literal> and <literal>72</literal>:</para>
            
            
            <programlisting>
<xi:include href="../../../examples/code/justRight.jsh" parse="text/plain"/>
</programlisting>
            <para>One thing to note about this example is that there are no <code>else</code> statements. There could be, but they aren't necessary since in all cases they would return <literal>false</literal>, which is also what the last statement of the method does.
            </para>
            <para>
                Also notice that the nested if block is indented further than the block it is nested in. This is an important style convention that you should follow whenever opening nested blocks of code, not just with nested if statements. 
            </para>
        </example>
    </section>
    
    
    <section>
        <title>if/else Chains</title>
    
    <para>When a situation calls for one of two kinds of action, we could use a if statement with an else statement following it. However, if there are more than two actions we might take, we can nest a new if statement inside of each else statement, forming a chain of if / else statements (ending in an else statement with no nested if statement). This way, rather than just two choices in the conditional statment, this if/else structure allows us to have 3 or more choices.</para>
        <para>One issue with this level of nesting is that the code can become very complex if we're following the indentation conventions. For instance, if there were 10 different choices in an if/else chain (not unheard of), the last else statement would be indented at least 20 spaces! 
        </para>
        
        <para>
            To avoid this complexity in the code, there are coding conventions that dictate when you should use curly braces and how much you should indent to avoid very wide lines in your code, summarized in the figure above. Rather than opening a brace for each else statement, instead, when an else statement is followed by another if, no brace is opened and the if immediately follows the else on the same line. Then a brace is opened for the if statement and also the final trailing else statement.
        </para>
 <example>
     <title>Ice Cream Choices with if/else Chains</title>
    <para>An application is being developed that can order an appropriate snack for you automatically. If the temperature outside is high, it will order an ice cream, and if the temperature is low, it will order a hot chocolate. Assume that there are two methods available that can order either of these foods. The code might look like this:
    </para>
<programlisting>
if ( temperature > 65 ) {
  orderIceCream();
} else {
  orderHotChocolate();
}
</programlisting>
    <para>
    Now consider that the application might also order popcorn if the temperature is more moderate. We would have to use a nested if statement to accomplish this:
    </para>
<programlisting>
if ( temperature > 80 ) {
  orderIceCream();
} else {
  if (temperature > 50 ) {
    orderPopcorn();
  } else {
    orderHotChocolate();
  }
}
</programlisting>
    <para>
    If we wanted to add, for example, 5 more snack options, this would become quite a mess, with many layers of nested if statements inside of else statements! Your code would be so far indented to the right, that it may begin to run over the length of the screen. 
    </para><para>
    This is avoided by not opening a new curly brace for each if statement that immediately follows an else, and instead putting both on the same line. The body of the else then becomes the if statement that follows the else, and the following if statement is not indented further than the else that it follows. For example, we could re-write the code above this way:
    </para>
<programlisting>
if ( temperature > 80 ) {
  orderIceCream();
} else if (temperature > 50 ) {
  orderPopcorn();
} else {
  orderHotChocolate();
}
</programlisting>
 </example>
    </section>
    
    
    <section>
        <info>
            <title>Switch Statements</title>
        </info>
        
        <para>If each of the <code>if</code> statements in an if/else chain are simply comparing some expression to one of several literal values, there is a special syntax in Java called a <firstterm>switch</firstterm> statement that can be used instead. In some of these cases, this will be a little easier to read and more efficient. 
        </para>
        
        
        <para>
            The syntax for switch statements is a little tricker than the other conditional statements we've seen. Following the <code>switch</code> keyword is an expression in parantheses, but it won't be a boolean expression. Instead, it can be any other type of primitive or String value. This value will be compared against a number of literal values inside of the switch statement body, which follows.</para><para>
            The body is contained within a pair of curly braces and consists of a series of <firstterm>case statements</firstterm>. Each case statement begins with the <code>case</code> keyword, followed by the literal value that the resulting value from the original expression at the head of the switch statement will be compared to, and then a colon. Following that will be a series of statements. Curly braces are not necessary.
        </para><para>
            Note that after a case statement is complete, the next case statement will be executed! Unless this is intentional, you must explicitly end the switch statement using a <firstterm>break statement</firstterm>. This is simply the keyword <code>break</code> followed by a semicolon. Break statements are not needed if a return statement is used, since execution of the enclosing method will end at that point anyway. 
        </para><para>
            One last important feature of the switch statement syntax is the <firstterm>default case</firstterm> which can handle the case where the value we get back from the initial expression doesn't match any of the literal values in the cases. A switch statement without a default case will simply do nothing. </para>
        <para>There is a sepcial syntax for defining the default case. Default cases look like the other case statements, but they use the keyword <code>default</code> instead of <code>case</code> and are immediately followed by a colon instead of some literal value to compare with.
        </para>
        
        <example>
            <title>Switching Over Letter-Grade Characters</title>
            <para>A gradebook application needs to determine the minimum grade needed for each letter grade. Letter grades will be represented with capital letter characters. This functionality could be developed using an if/else chain:
                </para>
             
<programlisting>
int getMinimumGrade(char letterGrade) {
  if ( letterGrade == 'A' ) {
    return 90;
  } else if ( letterGrade == 'B' ) {
    return 80;
  } else if ( letterGrade == 'C' ) {
    return 70;
  } else if ( letterGrade == 'D' ) {
    return 60;
  } else {
    return 0;
  }
}
</programlisting>
            
            <para> However, this is a good opportunity to use a switch statement. The switch statement below takes equivalent action, but will run a little more efficiently and may be a little easier to read and modify:
            </para>
            
<programlisting>
int getMinimumGrade(char letterGrade) {
  switch(letterGrade) {
    case 'A':
      return 90;
    case 'B':
      return 80;
    case 'C':
      return 70;
    case 'D':
      return 60;
    default:
      return 0;
  }
} 
</programlisting> 
<para>Note that no break statements are needed in this example since return statements are used in each case.</para>
</example>
    </section>
    
    
</section>
