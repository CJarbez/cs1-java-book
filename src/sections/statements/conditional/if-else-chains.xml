<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="section.if-else-chains"
    xmlns:xi="http://www.w3.org/2001/XInclude">
        <title>if/else Chains</title>

    <para>When a situation calls for one of two kinds of action, we could use a if statement with an else statement following it. However, if there are more than two actions we might take, we can nest a new if statement inside of each else statement, forming a chain of if / else statements (ending in an else statement with no nested if statement). This way, rather than just two choices in the conditional statement, this if/else structure allows us to have 3 or more choices.</para>
        <para>One issue with this level of nesting is that the code can become very complex if we're following the indentation conventions. For instance, if there were 10 different choices in an if/else chain (not unheard of), the last else statement would be indented at least 20 spaces!
        </para>

        <para>
            To avoid this complexity in the code, there are coding conventions that dictate when you should use curly braces and how much you should indent to avoid very wide lines in your code, summarized in the figure above. Rather than opening a brace for each else statement, instead, when an else statement is followed by another if, no brace is opened and the if immediately follows the else on the same line. Then a brace is opened for the if statement and also the final trailing else statement.
        </para>
 <example>
     <title>Ice Cream Choices with if/else Chains</title>
    <para>An application is being developed that can order an appropriate snack for you automatically. If the temperature outside is high, it will order an ice cream, and if the temperature is low, it will order a hot chocolate. Assume that there are two methods available that can order either of these foods. The code might look like this:
    </para>
<programlisting>
if ( temperature > 65 ) {
  orderIceCream();
} else {
  orderHotChocolate();
}
</programlisting>
    <para>
    Now consider that the application might also order popcorn if the temperature is more moderate. We would have to use a nested if statement to accomplish this:
    </para>
<programlisting>
if ( temperature > 80 ) {
  orderIceCream();
} else {
  if (temperature > 50 ) {
    orderPopcorn();
  } else {
    orderHotChocolate();
  }
}
</programlisting>
    <para>
    If we wanted to add, for example, 5 more snack options, this would become quite a mess, with many layers of nested if statements inside of else statements! Your code would be so far indented to the right, that it may begin to run over the length of the screen.
    </para><para>
    This is avoided by not opening a new curly brace for each if statement that immediately follows an else, and instead putting both on the same line. The body of the else then becomes the if statement that follows the else, and the following if statement is not indented further than the else that it follows. For example, we could re-write the code above this way:
    </para>
<programlisting>
if ( temperature > 80 ) {
  orderIceCream();
} else if (temperature > 50 ) {
  orderPopcorn();
} else {
  orderHotChocolate();
}
</programlisting>
 </example>
    </section>
