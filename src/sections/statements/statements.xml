<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="section.statements"
    xmlns:xi="http://www.w3.org/2001/XInclude" >
    <info>
        <title>Statements</title>
    </info>
    <para> 
        <termdef xml:id="term.statement">
            A <firstterm>statement</firstterm> is essentially a single instruction.
        </termdef>
        This is a fairly abstract definition, but statements serve many purposes in imperative programming languages like Java and can embody simple or complex instructions. The main difference between a statement and what we've seen with expressions is that statements don't evaluate to some value. Instead, they do somethig to the state of the computing environemnt. For instance, they may alter the value of a variable, or print something to the screen. These actions are refered to as <firstterm>side effects</firstterm> and are the heart of imperative programming. 
    </para>
    <para>
        Syntactically, statements will vary, but for the most part end with a semicolon (similar to the period at the end of a sentence in English).  A very simple statement consists of an expression followed by semicolon. For example, the hello world example we started with mostly fits this pattern:
        <programlisting>System.out.println("Hello World!");</programlisting>
        This is essentially a method call expression (though it involves a few other concepts we'll explore soon) with a semicolon at the end. When we call this method, we're not concerned with what value it returns, but rather what it "does". In this case, the statement prints the welcome message to the screen (an example of a side effect). 
    </para>
</section>