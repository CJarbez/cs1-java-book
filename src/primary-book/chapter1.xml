<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="chapter.algorithms"
      xmlns:xi="http://www.w3.org/2001/XInclude">
  <info>
    <title>Evaluating Simple Expressions</title>
  </info>
  
  <para>
    Developing computer programs in a programming language such as Java has its paralells in writing a book in a natural language like English. Both natural languages and programming languages have rules of <firstterm>syntax</firstterm> that govern how different elements of the language can be joined together. In the case of English, these are the rules for putting words together in a sentence that you may have studied in an English grammar class. For instance, the prior sentence in this paragraph is well-formed (it follows the rules of proper English grammar), but sentence this one not because rules syntax properly follow not. </para>
  <para>That last sentence may have taken you a moment to understand, but I expect that you did. This is the principal difference between a natural language and a programming language: the latter doesn't make any sense at all to the computer unless it is well-formed (strictly follows all rules of syntax). Thus, it's important to have a good foundation of understanding for what these rules are in Java before diving in to writing complex programs. The good news is that some of the more simple syntax in Java, namely expressions, are also considerably powerful, especially when used with a REPL (such as the recently release Java REPL JShell). We'll dive in to some basic expressions, what a REPL is, and how to use a REPL in this first chapter.
  </para>
  
  <xi:include href="../sections/enactment/repls.xml"/>
  <xi:include href="../sections/expressions/expressions.xml"/>
  <xi:include href="../sections/expressions/arithmetic-expressions.xml"/>  
</chapter>
